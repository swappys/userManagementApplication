swagger: "2.0"
info:
  title: User Management API
  description: API for managing users
  version: "1.0"
host: localhost:8000
basePath: /api
schemes:
  - http
paths:
  /register:
    post:
      summary: Register a new user
      description: Endpoint to register a new user.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be registered
          required: true
          schema:
            $ref: "#/definitions/UserRegister"
      responses:
        200:
          description: Registration status
          schema:
            type: array
            items:
              $ref: "#/definitions/UserRegisterResponse"
        400:
          description: Email is taken || Email is required || Name is required || password is required || Email is invalid
        500:
          description: Internal Server Error

  /login:
    post:
      summary: User Login
      description: Endpoint to user login.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be loggedin
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: Login response
          schema:
            type: array
            items:
              $ref: "#/definitions/UserLoginResponse"
        400:
          description: User with that email was not found || Wrong password || Please consider changing your password to access the system
        500:
          description: Internal Server Error
  /generateNewToken:
    post:
      summary: Generate a new token
      description: Endpoint to generate a new token.
      produces:
        - application/json
      parameters:
        - in: body
          name: refresh token
          description: refresh token object
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: Token generation response
          schema:
            type: array
            items:
              $ref: "#/definitions/TokenGenerationResponse"
        403:
          description: Invalid refresh token
        500:
          description: Internal Server Error

  /updateUser/{userId}:
    put:
      summary: Update a user
      description: Endpoint to update an existing user.
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: ID of the user to update
          required: true
          type: string
        - in: body
          name: user
          description: User object with updated information
          required: true
          schema:
            $ref: "#/definitions/UserUpdate"
      responses:
        200:
          description: Update status
          schema:
            type: array
            items:
              $ref: "#/definitions/UserUpdateResponse"
        400:
          description: User update failed
        401:
          description: Unauthorized
        403:
          description: The access token is invalid                     
        500:
          description: Internal Server Error
  
  /getAllUsers:
    get:
      summary: Get all users
      description: Retrieve a list of all users.
      produces:
        - application/json
      responses:
        200:
          description: List of users retrieved successfully
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        500:
          description: Internal Server Error

  /deleteUser/{userId}:
    delete:
      summary: Delete a user
      description: Endpoint to delete an existing user.
      produces:
        - application/json
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: userId
          description: ID of the user to delete
          required: true
          type: string
      responses:
        200:
          description: User deleted
        404:
          description: User with that id was not found
        500:
          description: Internal Server Error

  /logout:
    delete:
      summary: Logout a user
      description: Endpoint to log out user.
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User object that needs to be loggedOut
          required: true
          schema:
            $ref: "#/definitions/UserLogout"
      responses:
        204:
          description: ""

        500:
          description: Internal Server Error


securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
definitions:
  User:
    type: object
    properties:
      _id:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
      __v:
        type: integer

  UserRegister:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string

  UserRegisterResponse:
    type: object
    properties:
      ok:
        type: boolean

  UserLogin:
    type: object
    properties:
      email:
        type: string
      password:
        type: string

  GenerateNewToken:
    type: object
    properties:
      refreshToken:
        type: string


  UserLogout:
    type: object
    properties:
      token:
        type: string

  UserLoginResponse:
    type: object
    properties:
      success:
        type: boolean
      token:
        type: string
      refreshToken:
        type: string
      user:
        type: object
        properties:
          firstName:
           type: string 
          lastName:
           type: string                             
          email:
           type: string
          createdAt:
           type: string
          updatedAt:
           type: string           


  UserUpdate:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string

  UserUpdateResponse:
    type: object
    properties:
      ok:
        type: boolean

  TokenGenerationResponse:
    type: object
    properties:
      token:
        type: string
      

